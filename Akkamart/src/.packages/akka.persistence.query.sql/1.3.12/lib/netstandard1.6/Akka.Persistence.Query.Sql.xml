<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Akka.Persistence.Query.Sql</name>
    </assembly>
    <members>
        <member name="M:Akka.Persistence.Query.Sql.SqlReadJournal.DefaultConfiguration">
            <summary>
            Returns a default query configuration for akka persistence SQLite-based journals and snapshot stores.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Akka.Persistence.Query.Sql.SqlReadJournal.PersistenceIds">
            <summary>
            <para>
            <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.PersistenceIds"/> is used for retrieving all `persistenceIds` of all
            persistent actors.
            </para>
            The returned event stream is unordered and you can expect different order for multiple
            executions of the query.
            <para>
            The stream is not completed when it reaches the end of the currently used `persistenceIds`,
            but it continues to push new `persistenceIds` when new persistent actors are created.
            Corresponding query that is completed when it reaches the end of the currently
            currently used `persistenceIds` is provided by <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.CurrentPersistenceIds"/>.
            </para>
            The SQL write journal is notifying the query side as soon as new `persistenceIds` are
            created and there is no periodic polling or batching involved in this query.
            <para>
            The stream is completed with failure if there is a failure in executing the query in the
            backend journal.
            </para>
            </summary>
        </member>
        <member name="M:Akka.Persistence.Query.Sql.SqlReadJournal.CurrentPersistenceIds">
            <summary>
            Same type of query as <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.PersistenceIds"/> but the stream
            is completed immediately when it reaches the end of the "result set". Persistent
            actors that are created after the query is completed are not included in the stream.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Query.Sql.SqlReadJournal.EventsByPersistenceId(System.String,System.Int64,System.Int64)">
            <summary>
            <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.EventsByPersistenceId(System.String,System.Int64,System.Int64)"/> is used for retrieving events for a specific
            <see cref="T:Akka.Persistence.PersistentActor"/> identified by <see cref="P:Akka.Persistence.Eventsourced.PersistenceId"/>.
            <para>
            You can retrieve a subset of all events by specifying <paramref name="fromSequenceNr"/> and <paramref name="toSequenceNr"/>
            or use `0L` and <see cref="F:System.Int64.MaxValue"/> respectively to retrieve all events. Note that
            the corresponding sequence number of each event is provided in the
            <see cref="T:Akka.Persistence.Query.EventEnvelope"/>, which makes it possible to resume the
            stream at a later point from a given sequence number.
            </para>
            The returned event stream is ordered by sequence number, i.e. the same order as the
            <see cref="T:Akka.Persistence.PersistentActor"/> persisted the events. The same prefix of stream elements (in same order)
             are returned for multiple executions of the query, except for when events have been deleted.
            <para>
            The stream is not completed when it reaches the end of the currently stored events,
            but it continues to push new events when new events are persisted.
            Corresponding query that is completed when it reaches the end of the currently
            stored events is provided by <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.CurrentEventsByPersistenceId(System.String,System.Int64,System.Int64)"/>.
            </para>
            The SQLite write journal is notifying the query side as soon as events are persisted, but for
            efficiency reasons the query side retrieves the events in batches that sometimes can
            be delayed up to the configured `refresh-interval`.
            <para></para>
            The stream is completed with failure if there is a failure in executing the query in the
            backend journal.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Query.Sql.SqlReadJournal.CurrentEventsByPersistenceId(System.String,System.Int64,System.Int64)">
            <summary>
            Same type of query as <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.EventsByPersistenceId(System.String,System.Int64,System.Int64)"/> but the event stream
            is completed immediately when it reaches the end of the "result set". Events that are
            stored after the query is completed are not included in the event stream.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Query.Sql.SqlReadJournal.EventsByTag(System.String,Akka.Persistence.Query.Offset)">
            <summary>
            <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.EventsByTag(System.String,Akka.Persistence.Query.Offset)"/> is used for retrieving events that were marked with
            a given tag, e.g. all events of an Aggregate Root type.
            <para></para>
            To tag events you create an <see cref="T:Akka.Persistence.Journal.IEventAdapter"/> that wraps the events
            in a <see cref="T:Akka.Persistence.Journal.Tagged"/> with the given `tags`.
            <para></para>
            You can use <see cref="T:Akka.Persistence.Query.NoOffset"/> to retrieve all events with a given tag or retrieve a subset of all
            events by specifying a <see cref="T:Akka.Persistence.Query.Sequence"/>. The `offset` corresponds to an ordered sequence number for
            the specific tag. Note that the corresponding offset of each event is provided in the
            <see cref="T:Akka.Persistence.Query.EventEnvelope"/>, which makes it possible to resume the
            stream at a later point from a given offset.
            <para></para>
            The `offset` is exclusive, i.e. the event with the exact same sequence number will not be included
            in the returned stream.This means that you can use the offset that is returned in <see cref="T:Akka.Persistence.Query.EventEnvelope"/>
            as the `offset` parameter in a subsequent query.
            <para></para>
            In addition to the <paramref name="offset"/> the <see cref="T:Akka.Persistence.Query.EventEnvelope"/> also provides `persistenceId` and `sequenceNr`
            for each event. The `sequenceNr` is the sequence number for the persistent actor with the
            `persistenceId` that persisted the event. The `persistenceId` + `sequenceNr` is an unique
            identifier for the event.
            <para></para>
            The returned event stream is ordered by the offset (tag sequence number), which corresponds
            to the same order as the write journal stored the events. The same stream elements (in same order)
            are returned for multiple executions of the query. Deleted events are not deleted from the
            tagged event stream.
            <para></para>
            The stream is not completed when it reaches the end of the currently stored events,
            but it continues to push new events when new events are persisted.
            Corresponding query that is completed when it reaches the end of the currently
            stored events is provided by <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.CurrentEventsByTag(System.String,Akka.Persistence.Query.Offset)"/>.
            <para></para>
            The SQL write journal is notifying the query side as soon as tagged events are persisted, but for
            efficiency reasons the query side retrieves the events in batches that sometimes can
            be delayed up to the configured `refresh-interval`.
            <para></para>
            The stream is completed with failure if there is a failure in executing the query in the
            backend journal.
            </summary>
        </member>
        <member name="M:Akka.Persistence.Query.Sql.SqlReadJournal.CurrentEventsByTag(System.String,Akka.Persistence.Query.Offset)">
            <summary>
            Same type of query as <see cref="M:Akka.Persistence.Query.Sql.SqlReadJournal.EventsByTag(System.String,Akka.Persistence.Query.Offset)"/> but the event stream
            is completed immediately when it reaches the end of the "result set". Events that are
            stored after the query is completed are not included in the event stream.
            </summary>
        </member>
    </members>
</doc>
